"""
Разработать класс SuperStr, который наследует
функциональность стандартного типа str и содержит два
новых метода:
● метод is_repeatance(s), который принимает некоторую
строку и возвращает True или False в зависимости от того,
может ли текущая строка быть получена целым
количеством повторов строки s. Считать, что пустая
строка не содержит повторов
● метод is_palindrom(), который возвращает True или False в
зависимости от того, является ли строка палиндромом вне
зависимости от регистра. Пустую строку считать
палиндромом.
"""


class SuperStr(str):
    def is_repeatance(self, s):
        """
        Метод проверяет, может ли текущая строка быть получена целым количеством повторов строки s.

        :param s: строка, с которой проверяется возможность повторения
        :return: True, если строка может быть получена повторением s, иначе False
        """
        # Пустая строка не может содержать повторов
        if not s:
            return False

        # Проверяем, делится ли длина текущей строки на длину строки s
        if len(self) % len(s) == 0:
            # Проверяем, что строка состоит из целого числа повторений s
            return self == s * (len(self) // len(s))
        return False

    def is_palindrom(self):
        """
        Метод проверяет, является ли строка палиндромом (игнорируется регистр).

        :return: True, если строка является палиндромом, иначе False
        """
        normalized_str = self.lower()  # Игнорируем регистр
        return normalized_str == normalized_str[::-1]


# Пример использования:
s1 = SuperStr("ababab")
s2 = SuperStr("racecar")
s3 = SuperStr("hello")

# Проверка на повторяемость
print(s1.is_repeatance("ab"))  # True, так как "ababab" = "ab" * 3
print(s2.is_repeatance("race"))  # False, так как "racecar" не состоит из повторений "race"

# Проверка на палиндром
print(s2.is_palindrom())  # True, так как "racecar" палиндром
print(s3.is_palindrom())  # False, так как "hello" не палиндром
